{
  "hash": "55d2aacdc495cee7445f066d0bd446ea",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Organizing things for Successfull Reproducibility\"\nformat: html\n---\n\n\nOne of the first steps to achieve reproducibility is to set up a robust structure for our work. The fundamental idea behind a reproducible analysis is a clean, repeatable script-based workflow. This will allow you to re-run your analysis as many times as needed before (and after) the completion of your project. The smoother and more automated the workflow, the easier, faster and more robust the process of repeating it will be (British Ecology Society).\n\nLet's talk about organization.\n\n## File System Structure\n\nHow do we tell our code where to find files?\n\nBy stating a file path. For example if my code is trying to read `some_data.csv`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsome_data <- read.csv(\"/home/vargas-poulsen/Documentes/Workshops/RLadies-SB/reproducible-workflows/some_data.csv\")\n```\n:::\n\n\nIf I share my script with this file path to my colleagues, would they be able to open the file?\n\nProbably not, given that the file is unique to my machine with my user name and file system organization.\n\nA better (and reproducible) way:\n\n**RProjects**\n\n-   Provides a self contained working directory that does not depend on the <ins>absolute location<ins> of your computer.\n-   Bundles all your work within a working directory, **pointing to relative locations within the project**.\n-   Within this centralize location we can organize all the files involved in our project (inputs data, scripts, outputs, etc.)\n\n\nWhen you create an RProject, it creates and `Rproj` file and **a folder in your computer that will be the _working directory_ ** when your are working in your `Rproj`.\n\n\n![](images/horst_rproj_swd.png)\n\n\n::: callout-note\n## Absolute paths vs relative paths\n\n-   An **absolute path** always starts with the root of your file system and locates files from there. For example: `/home/vargas-poulsen/Documentes/Workshops/RLadies-SB/reproducible-workflows/data/some_data.csv`\n\n-   **Relative paths** start from some location in your file system that is below the root. Relative paths are combined with the path of that location to locate files on your system. R refer to the location where the relative path starts as our working directory. For example, if my project is named `repoducible-workflows`, then the relative path to  `some_data.csv` will be `data/some_data.csv`.\n:::\n\n\n### Organizing files in you project\n\nAs we mentioned before, when you create an R Project, R creates a folder in your computer (note that you choose where this folde lives) with the same name as your R project, this folder is the working directory when you open the .Rpoj file. After creating a project, it is good practice to set up an organized structure of sub folders within you project. \n\nOrganization is personal and will vary depending on each project's need. The main point is to ensure that the structure of the folders (directories) and location of files in your project are consistent, informative and works for you. Having a consistent and organized project structure gets you a long way when it comes to reproducibility.**The location of files should be as informative as possible on what a file contains** The idea is to organize your research into a compendium that has all of the digital parts needed to replicate your analysis, like code, figures, the manuscript, and data access.\n\nSome common sub-folders (directories) within a basic R project structure are:\n\n::: columns\n\n::: {.column width=\"55%\"}\n- `data`: where we store our data (often contains sub-directories for raw, processed, and metadata data)\n- `R` or `scripts`: contains scripts for cleaning or wrangling, etc. (some find this name misleading if their work has other scripts beyond the R programming language, in which case they call this directory `scripts`)\n- `plots` or `figs`: generated plots, graphs, and figures\n- `docs`: summaries or reports of analysis or other relevant project information\n\nDirectory organization will vary from project to project, but the ultimate goal is to create a well organized project for both reproducibility and collaboration.\n:::\n\n::: {.column width=\"45%\"}\n![](images/rproj-basic-organization.png)\n:::\n:::\n\n\n### One more thing about (reproducible) file paths\n\nWorking within an R project is the first step to making my file paths reproducible given that all my work is contained within this project. However, pointing to things within my project (by pointing the correct file path) can still bring some issues when reproducing my work in different machines. For example from [R for Data Science](https://r4ds.had.co.nz/workflow-projects.html#paths-and-directories) (Grolemund & Wickham) \n\n- Mac and Linux uses slashes (e.g. plots/diamonds.pdf) and Windows uses backslashes (e.g. plots\\diamonds.pdf). R can work with either type (no matter what platform you’re currently using). But, \\ backslashes mean something special to R, so we need to be careful when using them.\n\n- ~ is a convenient shortcut to your home directory on mac. Windows doesn’t really have the notion of a home directory, so it instead points to your documents directory.\n\n**How to make your file paths withing your project robust?**\n\n`here::here()`\n\n\n![](images/horst_here_function.png)\n\nThe `here` package help us set unbreakable paths by setting the default working directory to be the project's directory and, you don't need to use either `\\\\` or `/` to indicate path to you file. Instead, each directory in your file path is written in quotation separated with a comma. For example if I'm wowing on a `.qmd` file that lives inside my `doc` folder and I want to read in data from `data/raw` it would look like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nraw_data <- read_csv(here::here(\"data\", \"raw\", \"my_raw_data.csv\"))\n```\n:::\n\n\nThe `here::here()` calls the function `here()` from the (`::`) package `here`.\n\n\nThis is particularly helpful when we have multiple folders in out project for different purposes.\n\n:::callout-tip\n## Concluding Remarks\n\nUsing R Projects + `here()` allows you to have self contained and portable analysis with all file paths relative to the project. If you share your project folder, your colleague, friend, collaborator should be able to run all the scripts with (hopefully) no issues. AKA.. We have a reproducible workflow.\n\n:::\n\n\n### Naming Conventions\n\nThe documentation of your work starts with good files names and file system organization. This means naming materials, variables, objects, etc, associated with your analysis in a\n\n-   meaningful, \n-   concise, \n-   informative, \n-   consistent, and \n-   code-friendly way. \n\n\nThe name and location of files should be as informative as possible on what a file contains, why it exists, and how it relates to other files in the project (British Ecology Society). These principles apply to all files in your project, not just scripts and objects in your script. Good naming practices allows for a more intuitive workflow and helps with good data management practices.\n\n\nClear naming structure allows us to understand the content and relationship among elements in your analysis. It also makes it easier to search for a specific input or output associated to a particular script or step in your research.\n\n\n\n#### Meaningful {.unnumbered}\n- Names of variables, data frames, files (here on names) should not be too generic that the user or reader would need a definition or description to know what it contains.\n\n- Name should be specific and the easier to interpret the better.\n\n- Ensure file names also include informative description of file contents.\n\n> \"As a general rule of thumb, it’s better to prefer long, descriptive names that are easy to understand rather than concise names that are fast to type.\" (Grolemund & Wickham, R4DS)\n\n:::callout-warning\n## Bad vs Good filenames\n\n**Bad**\n- 01.R\n- fig1.png\n- file-1.csv\n\n\n**Better**\n- 01_download_data.R\n- fig1_scatterplot_bodytemperatur_metabolicactivity.png\n- ca_mean_annual_temp_by_county.csv\n\n\n:::\n\n#### Concise {.unnumbered}\n\n- It's a balance between meaningful and conciseness, but it is better to be descriptive than not know what it is.\n\n- Longer names means more typing, longer coding but less effort in looking up what each variable is.\n\n#### Consistent {.unnumbered}\n- Keep names for the same thing completely identical. R is space and case sensitive, this means that \"CA Temp\" is completely different than \"ca_temp\".\n\n- Make you life easier and be consistent on how you name things across data frames. For example, if you have a column `date`, other data frames SHOULD NOT be called `Date_start`.\n\n- Chose a naming convention and stick to it for better readability of your code. this_is_snake_case, (good for naming objects in your scripts), thisIsCamelCase, this-is-kebab.\n\n#### Easy to order by default {.unnumbered}\n- This is particular important for files names.\n\n- Start the file name with the most generic aspect (but significant) and then go to the more specific.\n\n> \"Choose filenames so that alphabetical sorting will organise types of files for\nyou: in the same way that ISO 8601 puts the most significant unit (year) first so\nthat alphabetical = chronological.\" – Hao Ye, UC San Diego\n\n\n#### Code/Machine Friendly {.unnumbered}\n\n- Avoid spaces, punctuation, accented characters and case sensitivity.\n\n- More specifically, stick to \"a-zA-Z0- 9_\" characters. Use periods/full stops for file\n type only (i.e. .csv).\n \n -  Use delimiters to separate words. For example, snake_case_convention or kebab-case-convention. \"_\" and \"-\" are great delimiters, be consistent and don't mix, this makes names easy to match and search programmatically and easy to analyse.\n\n\n:::callout-tip\n## Concluding Remarks\nIt is not the end of the world if you give something a bad name. And no work has to be perfect, but keeping this recommendations in mind could save you time in the long run and help search for specific files, objects with in a project easily.\n\n:::\n\n\n## Version Control: `Git`\n\n> \"Version control, also known as source control, is the practice of tracking and managing changes to software code. Version control systems are software tools that help software teams manage changes to source code over time.\" ([Atlassian](https://www.atlassian.com/git/tutorials/what-is-version-control))\n\n\n\n\n### GitHub\n\n\n## Workflow (part 1): RStudio + Git + GitHub\n\n## What about my (bigish) data?? - Workflow (part 2)\n\n1. Google Drive (Box, SharePoint?) - RStudio - GitHub\n2. Zenodo (other repositories) - RStudio - GitHub\n3. Server - RStudio - GitHub\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}