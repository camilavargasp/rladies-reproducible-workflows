---
title: "Organizing things for Successfull Reproducibility"
format: html
---

## Intro
"The fundamental idea behind a robust, reproducible analysis is a clean, repeatable
script-based workflow (i.e. the sequence of tasks from the start to the end of a
project) that links raw data through to clean data and to final analysis outputs. Most
analyses will be re-run many times before they are finished (and perhaps a number of
times more throughout the review process), so the smoother and more automated
the workflow, the easier, faster and more robust the process of repeating it will be." (British Ecology Society)


**Principles of a good analysis workflow**
- Start your analysis from copies of your raw data. (RAW data ALWAYS stays RAW)
- Any cleaning, merging, transforming, etc. of data should be done in scripts,
 not manually.
 -  Split your workflow (scripts) into logical thematic units. For example, you might
 separate your code into scripts that (i) load, merge and clean data, (ii) analyse
 data, and (iii) produce outputs like figures and tables.
 -  Eliminate code duplication by packaging up useful code into custom functions
 (see Programming). Make sure to comment your functions thoroughly,
 explaining their expected inputs and outputs, and what they are doing and why.
- Document your code and data as comments in your scripts or by producing
 separate documentation (see Programming and Reproducible reports).
- Any intermediary outputs generated by your workflow should be kept separate
 from raw data

## File names
"The simplest and most effective way of documenting your workflow – its inputs
and outputs – is through good file system organisation, and informative, consistent
naming of materials associated with your analysis. The name and location of files
should be as informative as possible on what a file contains, why it exists, and how it relates to other files in the project"

:::callout-tip

> "Choose filenames so that alphabetical sorting will organise types of files for
you: in the same way that ISO 8601 puts the most significant unit (year) first so
that alphabetical = chronological." – Hao Ye, UC San Diego

:::

## File System Structure

R projects -each project its own directory and gives relatives paths (portable code)
Different files: raw_data (don’t touch), figures, processed_data

## How this looks all together..
(Possible Workflows)

1. Google Drive (Box, SharePoint?) - RStudio - GitHub
2. Zenodo (other repositories) - RStudio - GitHub
3. Server - RStudio - GitHub



