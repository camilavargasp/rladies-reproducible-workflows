---
title: "Organizing things for Successfull Reproducibility"
format: html
---

To achieve computational reproducibility we have to make sure to set up for success building robust workflows. The fundamental idea behind a reproducible analysis is a clean, repeatable script-based workflow. This will allow you to re-run your analysis as many times as needed before (and after) the completion of your project. The smoother and more automated the workflow, the easier, faster and more robust the process of repeating it will be (British Ecology Society).

Let's talk about organization.

## File System Structure: Projects

How do we tell our code where to find files?

By stating a file path. For example if my code is tring to read `some_data.csv`


```{r}
#| eval: false

some_data <- read.csv("/home/vargas-poulsen/Documentes/Workshops/RLadies-SB/reproducible-workflows/some_data.csv")

```

If I share my script with this file path to my colleagues, would they be able to open the file?

Probably not, given that the file is unique to my machine with my user name and file system organization.

A better (and reproducible) way:

**RProjects**

-   Provides a self contained working directory that does not depend on the absolute location of your computer.
-   Bundles all your work within a working directory, pointing to relative locations within the project.
-   Within this centralize location we can organize all the files involved in our project (inputs data, scripts, outputs, etc.)


When you create an RProject, it creates and `Rproj` file and a folder in your computer that will be the _working directory_ when your are working in your `Rproj`.




::: callout-note
## Absolute paths vs relative paths

-   An **absolute path** always starts with the root of your file system and locates files from there. For example: `/home/vargas-poulsen/Documentes/Workshops/RLadies-SB/reproducible-workflows/data/some_data.csv`

-   **Relative paths** start from some location in your file system that is below the root. Relative paths are combined with the path of that location to locate files on your system. R refer to the location where the relative path starts as our working directory. For example, if my project is named `repoducible-workflows`, then the relative path to  `some_data.csv` will be `data/some_data.csv`.
:::


### Organizing file in you project





## Naming Conventions
"The simplest and most effective way of documenting your workflow – its inputs
and outputs – is through good file system organisation, and informative, consistent
naming of materials associated with your analysis. The name and location of files
should be as informative as possible on what a file contains, why it exists, and how it relates to other files in the project"

:::callout-tip

> "Choose filenames so that alphabetical sorting will organise types of files for
you: in the same way that ISO 8601 puts the most significant unit (year) first so
that alphabetical = chronological." – Hao Ye, UC San Diego

:::

## Version Control: `Git`

> "Version control, also known as source control, is the practice of tracking and managing changes to software code. Version control systems are software tools that help software teams manage changes to source code over time." ([Atlassian](https://www.atlassian.com/git/tutorials/what-is-version-control))


### GitHub


## Workflow (part 1): RStudio + Git + GitHub

## What about my (bigish) data?? - Workflow (part 2)

1. Google Drive (Box, SharePoint?) - RStudio - GitHub
2. Zenodo (other repositories) - RStudio - GitHub
3. Server - RStudio - GitHub



