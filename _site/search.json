[
  {
    "objectID": "introduction.html",
    "href": "introduction.html",
    "title": "Introduction",
    "section": "",
    "text": "What is computational reproducibility?\nThe ability for another researcher to understand what you did for a paper - your data, methods and analyses - and repeat using the same data.\n\nSame data, same analysis, same result\n\nThe ability for you to repeat what you did!\n\nE.g., during the review process you may need to repeat your analysis workflow.\n\nDifferent from replicability: another research team repeats the whole research process and gets the same results\n\ndifferent data -&gt; same result.\n\n\n\nWhy aim for reproducibility?\n\nIncrease trust in science:\n\nReplicability crisis in pyschology\n\nGood return in investment - helps your future self\n\n(if you change a dataset, don’t need to spend hours trying to figure out what you did)\n\nOthers can build off what you’ve done.\n\n\n\nHow do you make your analyses reproducible?\nWhat we’ll talk about today\nThe how is surprisingly hard!\nFigure below from Trisovic et al. 2022 Scientific Data\n\nSuccess rate and errors before and after code cleaning. To objectively determine the effects of code cleaning, we subset the results that have explicit “successes” and errors while excluding the ones with TLE values as the outcome. As a result, the count of files in this figure is lower than the total count.\nSome reasons why it might be hard to make your analysis reproducible (examples from my own life):\n\nYour R packages get updated\nWebsites your R package was scraping become defunct (e.g., Taxonstand and TPL)\n\n\nlibrary(Taxonstand)\nTPL('Taraxacum officinale')\n\nYour working directory might be different if you change computers\nDisorganized code and analyses\n\nwhere is the raw data??\n\nNot automated\n\nhow did I go from raw data to processed data?\n\nPoorly documented code and analyses:\n\nwhy did I update these names with The Plant List and these other names with World Flora Online?\n\n\n\n\nFour facets of reproducibity\nfrom Utrecht University\n\nDocumentation\n\nWhat do you need to start this project\nwhy did\n\nOrganization\n\nWhat is the workflow?\n\nAutomation\n\nAutomated analyses\n\nDissemination\n\nHow do you spread and share your data and code",
    "crumbs": [
      "Sections",
      "Introduction"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome",
    "section": "",
    "text": "Welcome to our workshop!",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "version-control.html",
    "href": "version-control.html",
    "title": "Version Control",
    "section": "",
    "text": "“Version control, also known as source control, is the practice of tracking and managing changes to software code. Version control systems are software tools that help software teams manage changes to source code over time.” (Atlassian)\n\n\n” Data analysis, statistical research, and teaching statistics have at least one thing in common: these activities all produce many files! There are data files, source code, figures, tables, prepared reports, and much more. Most of these files evolve over the course of a project and often need to be shared with others, for reading or edits, as a project unfolds. Without explicit and structured management, project organization can easily descend into chaos, taking time away from the primary work and reducing the quality of the final product. This unhappy result can be avoided by repurposing tools and workflows from the software development world, namely, distributed version control.” (Janny Bryan - Excuse me do you have a moment to talk aout version control)\n“Anyone who has wrestled with multiple versions of a document or script named by appending the word “final” will know how quickly such naming conventions can escalate into absurdity. Version control provides a structured and transparent means of tracking changes to code and other files. It was designed for use in software development and it is equally applicable to scientific programming. By recording snapshots of a project at successive points in time, you can create a record of your project’s development while keeping your workspace clean. Version control also facilitates collaboration when used within project teams or when contributing to open source software projects” (Britich Ecology Society)\n\nVersion control software is designed to help you manage your file revisions. Version control software runs directly on your computer, allowing you to manage files within your local file system. You can also use version control software to interact with external copies of versioned files if you choose. (Britich Ecology Society)\n\n\nVersion control is the lab notebook of the digital world. It is what professionals use to keep track of what they have done and to collaborate with other people. Every large software development project relies on it, and most programmers use it for their small jobs as well.\nIt is not just for software: books, papers, small data sets, and anything that changes over time or needs to be shared can and should be stored in a version control system.\n\n\n\n\n\n\n\nTip\n\n\n\n“Tracking changes in documents with extended file formats such as Word or Excel documents is better done using their built-in revision control, although you can use version control software to store snapshots of these files.”"
  },
  {
    "objectID": "version-control.html#what-is-it-ans-why-is-it-important",
    "href": "version-control.html#what-is-it-ans-why-is-it-important",
    "title": "Version Control",
    "section": "",
    "text": "“Version control, also known as source control, is the practice of tracking and managing changes to software code. Version control systems are software tools that help software teams manage changes to source code over time.” (Atlassian)\n\n\n” Data analysis, statistical research, and teaching statistics have at least one thing in common: these activities all produce many files! There are data files, source code, figures, tables, prepared reports, and much more. Most of these files evolve over the course of a project and often need to be shared with others, for reading or edits, as a project unfolds. Without explicit and structured management, project organization can easily descend into chaos, taking time away from the primary work and reducing the quality of the final product. This unhappy result can be avoided by repurposing tools and workflows from the software development world, namely, distributed version control.” (Janny Bryan - Excuse me do you have a moment to talk aout version control)\n“Anyone who has wrestled with multiple versions of a document or script named by appending the word “final” will know how quickly such naming conventions can escalate into absurdity. Version control provides a structured and transparent means of tracking changes to code and other files. It was designed for use in software development and it is equally applicable to scientific programming. By recording snapshots of a project at successive points in time, you can create a record of your project’s development while keeping your workspace clean. Version control also facilitates collaboration when used within project teams or when contributing to open source software projects” (Britich Ecology Society)\n\nVersion control software is designed to help you manage your file revisions. Version control software runs directly on your computer, allowing you to manage files within your local file system. You can also use version control software to interact with external copies of versioned files if you choose. (Britich Ecology Society)\n\n\nVersion control is the lab notebook of the digital world. It is what professionals use to keep track of what they have done and to collaborate with other people. Every large software development project relies on it, and most programmers use it for their small jobs as well.\nIt is not just for software: books, papers, small data sets, and anything that changes over time or needs to be shared can and should be stored in a version control system.\n\n\n\n\n\n\n\nTip\n\n\n\n“Tracking changes in documents with extended file formats such as Word or Excel documents is better done using their built-in revision control, although you can use version control software to store snapshots of these files.”"
  },
  {
    "objectID": "version-control.html#how-does-it-work",
    "href": "version-control.html#how-does-it-work",
    "title": "Version Control",
    "section": "How does it work?",
    "text": "How does it work?\nGit is what one type of a version control system for file management. The main idea is that as you (and your collaborators) work on a project, the software tracks, and records any changes made by anyone.\n\nSimilar to the “track changes” features in Microsoft Word, but more rigorous, powerful, and scaled up to multiple files\nGreat for solo or collaborative work\nVersion control systems start with a base version of the document and then record changes you make each step of the way.\nFor example, two users can make independent sets of changes on the same document.\nUnless multiple users make changes to the same section of the document - a conflict - you can incorporate two sets of changes into the same base document.\nIt allows us to decide which changes will be made to the next version (each record of these changes is called a commit), and keeps useful metadata about them.\nThe complete history of commits for a particular project and their metadata make up a repository.\nRepositories can be kept in sync across different computers, facilitating collaboration among different people."
  },
  {
    "objectID": "version-control.html#a-note-on-github",
    "href": "version-control.html#a-note-on-github",
    "title": "Version Control",
    "section": "A note on GitHub",
    "text": "A note on GitHub\n“We’ve introduced Git’s powerful structure for file management, so where does GitHub fit in? GitHub complements Git by providing a slick user interface and distribution mechanism for Git repositories. Git is the software you will use locally to record changes to a set of files. GitHub is a hosting service that provides a Git-aware home for such projects on the internet. These relationships are shown in Figure 2. GitHub is like DropBox or Google Drive, but more structured, powerful, and programmatic.” (Bryan 2017)\n\nSo, What is GitHub?\n\nonline platform and service built around Git\nprovides a centralized hosting platform for Git repositories\nallows us to store, manage, and collaborate on their Git repositories in the cloud\noffers additional features on top of Git, such as a web-based interface, issue tracking, project management tools, pull requests, code review, and collaboration features\nenables easy sharing of code with others, facilitating collaboration and contribution to open source projects\nprovides a social aspect, allowing users to follow projects, star repositories, and discover new code"
  },
  {
    "objectID": "version-control.html#version-control-for-open-science-and-reproducibility",
    "href": "version-control.html#version-control-for-open-science-and-reproducibility",
    "title": "Version Control",
    "section": "Version Control for Open Science and Reproducibility",
    "text": "Version Control for Open Science and Reproducibility\nKeeping track of your work is not only useful for when you are currently working on a project or to keep thinks organized. It is also very powerful tool for documenting your work and making it transparent and reproducible."
  },
  {
    "objectID": "reproducible-workflows-workshop.html",
    "href": "reproducible-workflows-workshop.html",
    "title": "Documentation",
    "section": "",
    "text": "The ability for another researcher to understand what you did for a paper - your data, methods and analyses - and repeat using the same data.\n\nSame data, same analysis, same result\n\nThe ability for you to repeat what you did!\n\nE.g., during the review process you may need to repeat your analysis workflow.\n\nDifferent from replicability: another research team repeats the whole research process and gets the same results\n\ndifferent data -&gt; same result."
  },
  {
    "objectID": "reproducible-workflows-workshop.html#what-is-it-ans-why-is-it-important",
    "href": "reproducible-workflows-workshop.html#what-is-it-ans-why-is-it-important",
    "title": "Documentation",
    "section": "What is it ans why is it important?",
    "text": "What is it ans why is it important?\n\n“Version control, also known as source control, is the practice of tracking and managing changes to software code. Version control systems are software tools that help software teams manage changes to source code over time.” (Atlassian)\n\n\n” Data analysis, statistical research, and teaching statistics have at least one thing in common: these activities all produce many files! There are data files, source code, figures, tables, prepared reports, and much more. Most of these files evolve over the course of a project and often need to be shared with others, for reading or edits, as a project unfolds. Without explicit and structured management, project organization can easily descend into chaos, taking time away from the primary work and reducing the quality of the final product. This unhappy result can be avoided by repurposing tools and workflows from the software development world, namely, distributed version control.” (Janny Bryan - Excuse me do you have a moment to talk aout version control)\n“Anyone who has wrestled with multiple versions of a document or script named by appending the word “final” will know how quickly such naming conventions can escalate into absurdity. Version control provides a structured and transparent means of tracking changes to code and other files. It was designed for use in software development and it is equally applicable to scientific programming. By recording snapshots of a project at successive points in time, you can create a record of your project’s development while keeping your workspace clean. Version control also facilitates collaboration when used within project teams or when contributing to open source software projects” (Britich Ecology Society)\n\nVersion control software is designed to help you manage your file revisions. Version control software runs directly on your computer, allowing you to manage files within your local file system. You can also use version control software to interact with external copies of versioned files if you choose. (Britich Ecology Society)\n\n\nVersion control is the lab notebook of the digital world. It is what professionals use to keep track of what they have done and to collaborate with other people. Every large software development project relies on it, and most programmers use it for their small jobs as well.\nIt is not just for software: books, papers, small data sets, and anything that changes over time or needs to be shared can and should be stored in a version control system.\n\n\n\n\n\n\n\nTip\n\n\n\n“Tracking changes in documents with extended file formats such as Word or Excel documents is better done using their built-in revision control, although you can use version control software to store snapshots of these files.”"
  },
  {
    "objectID": "reproducible-workflows-workshop.html#how-does-it-work",
    "href": "reproducible-workflows-workshop.html#how-does-it-work",
    "title": "Documentation",
    "section": "How does it work?",
    "text": "How does it work?\nGit is what one type of a version control system for file management. The main idea is that as you (and your collaborators) work on a project, the software tracks, and records any changes made by anyone.\n\nSimilar to the “track changes” features in Microsoft Word, but more rigorous, powerful, and scaled up to multiple files\nGreat for solo or collaborative work\nVersion control systems start with a base version of the document and then record changes you make each step of the way.\nFor example, two users can make independent sets of changes on the same document.\nUnless multiple users make changes to the same section of the document - a conflict - you can incorporate two sets of changes into the same base document.\nIt allows us to decide which changes will be made to the next version (each record of these changes is called a commit), and keeps useful metadata about them.\nThe complete history of commits for a particular project and their metadata make up a repository.\nRepositories can be kept in sync across different computers, facilitating collaboration among different people."
  },
  {
    "objectID": "reproducible-workflows-workshop.html#a-note-on-github",
    "href": "reproducible-workflows-workshop.html#a-note-on-github",
    "title": "Documentation",
    "section": "A note on GitHub",
    "text": "A note on GitHub\n“We’ve introduced Git’s powerful structure for file management, so where does GitHub fit in? GitHub complements Git by providing a slick user interface and distribution mechanism for Git repositories. Git is the software you will use locally to record changes to a set of files. GitHub is a hosting service that provides a Git-aware home for such projects on the internet. These relationships are shown in Figure 2. GitHub is like DropBox or Google Drive, but more structured, powerful, and programmatic.” (Bryan 2017)\n\nSo, What is GitHub?\n\nonline platform and service built around Git\nprovides a centralized hosting platform for Git repositories\nallows us to store, manage, and collaborate on their Git repositories in the cloud\noffers additional features on top of Git, such as a web-based interface, issue tracking, project management tools, pull requests, code review, and collaboration features\nenables easy sharing of code with others, facilitating collaboration and contribution to open source projects\nprovides a social aspect, allowing users to follow projects, star repositories, and discover new code"
  },
  {
    "objectID": "reproducible-workflows-workshop.html#version-control-for-open-science-and-reproducibility",
    "href": "reproducible-workflows-workshop.html#version-control-for-open-science-and-reproducibility",
    "title": "Documentation",
    "section": "Version Control for Open Science and Reproducibility",
    "text": "Version Control for Open Science and Reproducibility\nKeeping track of your work is not only useful for when you are currently working on a project or to keep thinks organized. It is also very powerful tool for documenting your work and making it transparent and reproducible.\nOne of the first steps to achieve reproducibility is to set up a robust structure for our work. The fundamental idea behind a reproducible analysis is a clean, repeatable script-based workflow. This will allow you to re-run your analysis as many times as needed before (and after) the completion of your project. The smoother and more automated the workflow, the easier, faster and more robust the process of repeating it will be (British Ecology Society).\nLet’s talk about organization."
  },
  {
    "objectID": "reproducible-workflows-workshop.html#file-system-structure",
    "href": "reproducible-workflows-workshop.html#file-system-structure",
    "title": "Documentation",
    "section": "File System Structure",
    "text": "File System Structure\nHow do we tell our code where to find files?\nBy stating a file path. For example if my code is trying to read some_data.csv\n\nsome_data &lt;- read.csv(\"/home/vargas-poulsen/Documentes/Workshops/RLadies-SB/reproducible-workflows/some_data.csv\")\n\nIf I share my script with this file path to my colleagues, would they be able to open the file?\nProbably not, given that the file is unique to my machine with my user name and file system organization.\nA better (and reproducible) way:\nRProjects\n\nProvides a self contained working directory that does not depend on the absolute location of your computer.\nBundles all your work within a working directory, pointing to relative locations within the project.\nWithin this centralize location we can organize all the files involved in our project (inputs data, scripts, outputs, etc.)\n\nWhen you create an RProject, it creates and Rproj file and a folder in your computer that will be the working directory  when your are working in your Rproj.\n\n\n\n\n\n\n\nAbsolute paths vs relative paths\n\n\n\n\nAn absolute path always starts with the root of your file system and locates files from there. For example: /home/vargas-poulsen/Documentes/Workshops/RLadies-SB/reproducible-workflows/data/some_data.csv\nRelative paths start from some location in your file system that is below the root. Relative paths are combined with the path of that location to locate files on your system. R refer to the location where the relative path starts as our working directory. For example, if my project is named repoducible-workflows, then the relative path to some_data.csv will be data/some_data.csv.\n\n\n\n\nOrganizing files in you project\nAs we mentioned before, when you create an R Project, R creates a folder in your computer (note that you choose where this folde lives) with the same name as your R project, this folder is the working directory when you open the .Rpoj file. After creating a project, it is good practice to set up an organized structure of sub folders within you project.\nOrganization is personal and will vary depending on each project’s need. The main point is to ensure that the structure of the folders (directories) and location of files in your project are consistent, informative and works for you. Having a consistent and organized project structure gets you a long way when it comes to reproducibility.The location of files should be as informative as possible on what a file contains The idea is to organize your research into a compendium that has all of the digital parts needed to replicate your analysis, like code, figures, the manuscript, and data access.\nSome common sub-folders (directories) within a basic R project structure are:\n\n\n\ndata: where we store our data (often contains sub-directories for raw, processed, and metadata data)\nR or scripts: contains scripts for cleaning or wrangling, etc. (some find this name misleading if their work has other scripts beyond the R programming language, in which case they call this directory scripts)\nplots or figs: generated plots, graphs, and figures\ndocs: summaries or reports of analysis or other relevant project information\n\nDirectory organization will vary from project to project, but the ultimate goal is to create a well organized project for both reproducibility and collaboration.\n\n\n\n\n\n\nOne more thing about (reproducible) file paths\nWorking within an R project is the first step to making my file paths reproducible given that all my work is contained within this project. However, pointing to things within my project (by pointing the correct file path) can still bring some issues when reproducing my work in different machines. For example from R for Data Science (Grolemund & Wickham)\n\nMac and Linux uses slashes (e.g. plots/diamonds.pdf) and Windows uses backslashes (e.g. plots.pdf). R can work with either type (no matter what platform you’re currently using). But,  backslashes mean something special to R, so we need to be careful when using them.\n~ is a convenient shortcut to your home directory on mac. Windows doesn’t really have the notion of a home directory, so it instead points to your documents directory.\n\nHow to make your file paths withing your project robust?\nhere::here()\n\nThe here package help us set unbreakable paths by setting the default working directory to be the project’s directory and, you don’t need to use either \\\\ or / to indicate path to you file. Instead, each directory in your file path is written in quotation separated with a comma. For example if I’m wowing on a .qmd file that lives inside my doc folder and I want to read in data from data/raw it would look like this:\n\nraw_data &lt;- read_csv(here::here(\"data\", \"raw\", \"my_raw_data.csv\"))\n\nThe here::here() calls the function here() from the (::) package here.\nThis is particularly helpful when we have multiple folders in out project for different purposes.\n\n\n\n\n\n\nConcluding Remarks\n\n\n\nUsing R Projects + here() allows you to have self contained and portable analysis with all file paths relative to the project. If you share your project folder, your colleague, friend, collaborator should be able to run all the scripts with (hopefully) no issues. AKA.. We have a reproducible workflow.\n\n\n\n\nNaming Conventions\nThe documentation of your work starts with good files names and file system organization. This means naming materials, variables, objects, etc, associated with your analysis in a\n\nmeaningful,\nconcise,\ninformative,\nconsistent, and\ncode-friendly way.\n\nThe name and location of files should be as informative as possible on what a file contains, why it exists, and how it relates to other files in the project (British Ecology Society). These principles apply to all files in your project, not just scripts and objects in your script. Good naming practices allows for a more intuitive workflow and helps with good data management practices.\nClear naming structure allows us to understand the content and relationship among elements in your analysis. It also makes it easier to search for a specific input or output associated to a particular script or step in your research.\n\nMeaningful\n\nNames of variables, data frames, files (here on names) should not be too generic that the user or reader would need a definition or description to know what it contains.\nName should be specific and the easier to interpret the better.\nEnsure file names also include informative description of file contents.\n\n\n“As a general rule of thumb, it’s better to prefer long, descriptive names that are easy to understand rather than concise names that are fast to type.” (Grolemund & Wickham, R4DS)\n\n\n\n\n\n\n\nBad vs Good filenames\n\n\n\nBad - 01.R - fig1.png - file-1.csv\nBetter - 01_download_data.R - fig1_scatterplot_bodytemperatur_metabolicactivity.png - ca_mean_annual_temp_by_county.csv\n\n\n\n\nConcise\n\nIt’s a balance between meaningful and conciseness, but it is better to be descriptive than not know what it is.\nLonger names means more typing, longer coding but less effort in looking up what each variable is.\n\n\n\nConsistent\n\nKeep names for the same thing completely identical. R is space and case sensitive, this means that “CA Temp” is completely different than “ca_temp”.\nMake you life easier and be consistent on how you name things across data frames. For example, if you have a column date, other data frames SHOULD NOT be called Date_start.\nChose a naming convention and stick to it for better readability of your code. this_is_snake_case, (good for naming objects in your scripts), thisIsCamelCase, this-is-kebab.\n\n\n\nEasy to order by default\n\nThis is particular important for files names.\nStart the file name with the most generic aspect (but significant) and then go to the more specific.\n\n\n“Choose filenames so that alphabetical sorting will organise types of files for you: in the same way that ISO 8601 puts the most significant unit (year) first so that alphabetical = chronological.” – Hao Ye, UC San Diego\n\n\n\nCode/Machine Friendly\n\nAvoid spaces, punctuation, accented characters and case sensitivity.\nMore specifically, stick to “a-zA-Z0- 9_” characters. Use periods/full stops for file type only (i.e. .csv).\nUse delimiters to separate words. For example, snake_case_convention or kebab-case-convention. “_” and “-” are great delimiters, be consistent and don’t mix, this makes names easy to match and search programmatically and easy to analyse.\n\n\n\n\n\n\n\nConcluding Remarks\n\n\n\nIt is not the end of the world if you give something a bad name. And no work has to be perfect, but keeping this recommendations in mind could save you time in the long run and help search for specific files, objects with in a project easily."
  },
  {
    "objectID": "reproducible-workflows-workshop.html#version-control-git",
    "href": "reproducible-workflows-workshop.html#version-control-git",
    "title": "Documentation",
    "section": "Version Control: Git",
    "text": "Version Control: Git\n\n“Version control, also known as source control, is the practice of tracking and managing changes to software code. Version control systems are software tools that help software teams manage changes to source code over time.” (Atlassian)\n\n\nGitHub"
  },
  {
    "objectID": "reproducible-workflows-workshop.html#workflow-part-1-rstudio-git-github",
    "href": "reproducible-workflows-workshop.html#workflow-part-1-rstudio-git-github",
    "title": "Documentation",
    "section": "Workflow (part 1): RStudio + Git + GitHub",
    "text": "Workflow (part 1): RStudio + Git + GitHub"
  },
  {
    "objectID": "reproducible-workflows-workshop.html#what-about-my-bigish-data---workflow-part-2",
    "href": "reproducible-workflows-workshop.html#what-about-my-bigish-data---workflow-part-2",
    "title": "Documentation",
    "section": "What about my (bigish) data?? - Workflow (part 2)",
    "text": "What about my (bigish) data?? - Workflow (part 2)\n\nGoogle Drive (Box, SharePoint?) - RStudio - GitHub\nZenodo (other repositories) - RStudio - GitHub\nServer - RStudio - GitHub"
  },
  {
    "objectID": "reproducible-workflows-workshop.html#whats-in-a-project-readme",
    "href": "reproducible-workflows-workshop.html#whats-in-a-project-readme",
    "title": "Documentation",
    "section": "What’s in a project README?",
    "text": "What’s in a project README?\nYour project’s README file on GitHub introduces other researchers to your project repository; it is first thing someone will see when they encounter your project.\nIt also helps YOU. Help your future self remember what you did and why.\n\nIt should include:\n\nProject name\nProject description - what does the code do? why are you doing it?\nHow to get started\nDevelopment environment: what dependencies did you use and what version?\nWorkflow - how do you run the analysis?\nCredits\n\nExample of a README that includes, project name, description, how to get started and examples showing how to run package functions"
  },
  {
    "objectID": "reproducible-workflows-workshop.html#writing-reproducible-code",
    "href": "reproducible-workflows-workshop.html#writing-reproducible-code",
    "title": "Documentation",
    "section": "Writing reproducible code",
    "text": "Writing reproducible code\n\nStick to a readable coding style\nStick to “a-zA-Z0- 9_” characters; avoid periods (except eg ‘.csv’)\nThe R package styleR package will style your code according to the tidyverse style guide.\n\nstyler example\nThe code below doesn’t conform to the tidyverse style guide\n\nmy_df &lt;- data.frame(a = 1:3, b = c(\"a\", \"b\", \"c\"))\n\nLet’s use styler to fix that\n\nstyler takes this\n\nmy_df=data.frame(a=1:3, b=c(\"a\",\"b\",\"c\"))\n\nand changes it to this\n\nmy_df &lt;- data.frame(a = 1:3, b = c(\"a\", \"b\", \"c\"))\n\n\n\n\nNaming variables and functions\nTry to be concise and descriptive.\nFunctions: use a verb and make it clear what the function does\nFor example, instead of\n\nmy_function &lt;- function(a_number) a_number + 1\n\nuse\n\nadd_one &lt;- function(a_number) a_number + 1\n\nData frames and variables: use a noun and make it clear what it is\nInstead of:\n\nmy_df &lt;- data.frame(\n  plant = c(\"Claytonia virginica\", \"Erythronium americanum\"),\n  abundance = c(100, 20)\n)\n\nuse\n\nplant_abundance &lt;- data.frame(\n  plant = c(\"Claytonia virginica\", \"Erythronium americanum\"),\n  abundance = c(100, 20)\n)\n\n\n\nCommenting code\nHelp your future self! You want to make it easy for yourself (and others) to understand what you did and why.\n\nPut a brief explanatory comment at the start of every program\nFocus on why instead of what. Your code will tell the reader what it is doing, so focus on the reasoning behind your decisions.\n\nComments that tell us what the code does\n\n# join the measurement data with the bee species data\n# filter out NA scientific names \n# and filter out any bee measurements from the species Lasioglossum incomplotum\n\ncleaned_df &lt;- researcher_measurements %&gt;% \n  left_join(bees_df) %&gt;%\n  filter(!is.na(scientificName)) %&gt;% \n  filter(scientificName != \"Lasioglossum incompletum\")\n\nComments that tell us why the code does what it does\n\n#for our analysis we only want to analyze bee specimens that are identified to species, so we'll join our measurement data with the bee species data and remove anything not identified to species. We'll also removed the specimens of the species Lasioglossum incompletum, since this is not noe of our focal speecies.\ncleaned_df &lt;- researcher_measurements %&gt;% \n  left_join(bees_df) %&gt;%\n  filter(!is.na(scientificName)) %&gt;% \n  filter(scientificName != \"Lasioglossum incompletum\")\n\n\n\nDecompose code into functions \n\nThis minimizes errors (if you modify code in one part of the script and then forget to modify the code in another part that is doing the same thing)\nUse these if you find yourself copying and pasting\n\nLet’s return to our previous example.\nI had two sets of bee measurements, one from undergraduate researchers and one from community scientists. I needed to upload both datasets and clean them in the same way and I found myself copying and pasting:\n\nresearchers_cleaned &lt;- researcher_measurements %&gt;% \n  left_join(bees_df, by = \"catalogNumber\") %&gt;%\n  filter(!is.na(scientificName)) %&gt;% \n  filter(scientificName != \"Lasioglossum incompletum\")\n\ncommunity_cleaned &lt;- community_measurements %&gt;% \n  left_join(bees_df, by = \"catalogNumber\") %&gt;%\n  filter(!is.na(scientificName)) %&gt;% \n  filter(scientificName != \"Lasioglossum incompletum\")\n\nSo instead I wrote a function:\n\nclean_data = function(df){\n  df %&gt;% left_join(bees_df, by = \"catalogNumber\") %&gt;%\n    filter(!is.na(scientificName)) %&gt;% \n    filter(scientificName != \"Lasioglossum incompletum\") \n}\n\nand applied it to both my data sets:\n\nresearchers_cleaned &lt;- researcher_measurements %&gt;%\n  clean_data\n\ncommunity_cleaned &lt;- community_measurements %&gt;%\n  clean_data\n\nNow if I need to change something, I don’t need to worry about making that change in multiple lines of code.\n\n#I'm changing this function so that we also filter bees whose scientific names are \"\" in the dataset.\nclean_data = function(df){\n  df %&gt;% left_join(ucsb, by = \"catalogNumber\") %&gt;%\n    filter(!is.na(scientificName) & scientificName != \"\") %&gt;% \n    filter(scientificName != \"Lasioglossum incompletum\") \n}\n\n\n\nCommunicating with collaborators\n\nGithub issues – good for communicating with collaborators.\n\nGithub wikis – particularly for documentation; markdown file that you access through github"
  },
  {
    "objectID": "documentation.html",
    "href": "documentation.html",
    "title": "Documentation",
    "section": "",
    "text": "Your project’s README file on GitHub introduces other researchers to your project repository; it is first thing someone will see when they encounter your project.\nIt also helps YOU. Help your future self remember what you did and why.\n\n\n\nProject name\nProject description - what does the code do? why are you doing it?\nHow to get started\nDevelopment environment: what dependencies did you use and what version?\nWorkflow - how do you run the analysis?\nCredits\n\nExample of a README that includes, project name, description, how to get started and examples showing how to run package functions",
    "crumbs": [
      "Sections",
      "Documentation"
    ]
  },
  {
    "objectID": "documentation.html#whats-in-a-project-readme",
    "href": "documentation.html#whats-in-a-project-readme",
    "title": "Documentation",
    "section": "",
    "text": "Your project’s README file on GitHub introduces other researchers to your project repository; it is first thing someone will see when they encounter your project.\nIt also helps YOU. Help your future self remember what you did and why.\n\n\n\nProject name\nProject description - what does the code do? why are you doing it?\nHow to get started\nDevelopment environment: what dependencies did you use and what version?\nWorkflow - how do you run the analysis?\nCredits\n\nExample of a README that includes, project name, description, how to get started and examples showing how to run package functions",
    "crumbs": [
      "Sections",
      "Documentation"
    ]
  },
  {
    "objectID": "documentation.html#writing-reproducible-code",
    "href": "documentation.html#writing-reproducible-code",
    "title": "Documentation",
    "section": "Writing reproducible code",
    "text": "Writing reproducible code\n\nStick to a readable coding style\nStick to “a-zA-Z0- 9_” characters; avoid periods (except eg ‘.csv’)\nThe R package styleR package will style your code according to the tidyverse style guide.\n\nstyler example\nThe code below doesn’t conform to the tidyverse style guide\n\nmy_df &lt;- data.frame(a = 1:3, b = c(\"a\", \"b\", \"c\"))\n\nLet’s use styler to fix that\n\nstyler takes this\n\nmy_df=data.frame(a=1:3, b=c(\"a\",\"b\",\"c\"))\n\nand changes it to this\n\nmy_df &lt;- data.frame(a = 1:3, b = c(\"a\", \"b\", \"c\"))\n\n\n\n\nNaming variables and functions\nTry to be concise and descriptive.\nFunctions: use a verb and make it clear what the function does\nFor example, instead of\n\nmy_function &lt;- function(a_number) a_number + 1\n\nuse\n\nadd_one &lt;- function(a_number) a_number + 1\n\nData frames and variables: use a noun and make it clear what it is\nInstead of:\n\nmy_df &lt;- data.frame(\n  plant = c(\"Claytonia virginica\", \"Erythronium americanum\"),\n  abundance = c(100, 20)\n)\n\nuse\n\nplant_abundance &lt;- data.frame(\n  plant = c(\"Claytonia virginica\", \"Erythronium americanum\"),\n  abundance = c(100, 20)\n)\n\n\n\nCommenting code\nHelp your future self! You want to make it easy for yourself (and others) to understand what you did and why.\n\nPut a brief explanatory comment at the start of every program\nFocus on why instead of what. Your code will tell the reader what it is doing, so focus on the reasoning behind your decisions.\n\n\nWarning: package 'tidyr' was built under R version 4.3.2\n\n\n\nComments that tell us what the code does\n\n# join the measurement data with the bee species data\n# filter out NA scientific names \n# and filter out any bee measurements from the species Lasioglossum incomplotum\n\ncleaned_df &lt;- researcher_measurements %&gt;% \n  left_join(bees_df) %&gt;%\n  filter(!is.na(scientificName)) %&gt;% \n  filter(scientificName != \"Lasioglossum incompletum\")\n\nJoining with `by = join_by(catalogNumber)`\n\n\nComments that tell us why the code does what it does\n\n#for our analysis we only want to analyze bee specimens that are identified to species, so we'll join our measurement data with the bee species data and remove anything not identified to species. We'll also removed the specimens of the species Lasioglossum incompletum, since this is not noe of our focal speecies.\ncleaned_df &lt;- researcher_measurements %&gt;% \n  left_join(bees_df) %&gt;%\n  filter(!is.na(scientificName)) %&gt;% \n  filter(scientificName != \"Lasioglossum incompletum\")\n\nJoining with `by = join_by(catalogNumber)`\n\n\n\n\nDecompose code into functions \n\nThis minimizes errors (if you modify code in one part of the script and then forget to modify the code in another part that is doing the same thing)\nUse these if you find yourself copying and pasting\n\nLet’s return to our previous example.\nI had two sets of bee measurements, one from undergraduate researchers and one from community scientists. I needed to upload both datasets and clean them in the same way and I found myself copying and pasting:\n\nresearchers_cleaned &lt;- researcher_measurements %&gt;% \n  left_join(bees_df, by = \"catalogNumber\") %&gt;%\n  filter(!is.na(scientificName)) %&gt;% \n  filter(scientificName != \"Lasioglossum incompletum\")\n\ncommunity_cleaned &lt;- community_measurements %&gt;% \n  left_join(bees_df, by = \"catalogNumber\") %&gt;%\n  filter(!is.na(scientificName)) %&gt;% \n  filter(scientificName != \"Lasioglossum incompletum\")\n\nSo instead I wrote a function:\n\nclean_data = function(df){\n  df %&gt;% left_join(bees_df, by = \"catalogNumber\") %&gt;%\n    filter(!is.na(scientificName)) %&gt;% \n    filter(scientificName != \"Lasioglossum incompletum\") \n}\n\nand applied it to both my data sets:\n\nresearchers_cleaned &lt;- researcher_measurements %&gt;%\n  clean_data\n\ncommunity_cleaned &lt;- community_measurements %&gt;%\n  clean_data\n\nNow if I need to change something, I don’t need to worry about making that change in multiple lines of code.\n\n#I'm changing this function so that we also filter bees whose scientific names are \"\" in the dataset.\nclean_data = function(df){\n  df %&gt;% left_join(ucsb, by = \"catalogNumber\") %&gt;%\n    filter(!is.na(scientificName) & scientificName != \"\") %&gt;% \n    filter(scientificName != \"Lasioglossum incompletum\") \n}\n\n\n\nCommunicating with collaborators\n\nGithub issues – good for communicating with collaborators.\n\nGithub wikis – particularly for documentation; markdown file that you access through github",
    "crumbs": [
      "Sections",
      "Documentation"
    ]
  },
  {
    "objectID": "organization.html",
    "href": "organization.html",
    "title": "Organizing things for Successfull Reproducibility",
    "section": "",
    "text": "One of the first steps to achieve reproducibility is to set up a robust structure for our work. The fundamental idea behind a reproducible analysis is a clean, repeatable script-based workflow. This will allow you to re-run your analysis as many times as needed before (and after) the completion of your project. The smoother and more automated the workflow, the easier, faster and more robust the process of repeating it will be (British Ecology Society).\nLet’s talk about organization.",
    "crumbs": [
      "Sections",
      "Organization"
    ]
  },
  {
    "objectID": "organization.html#file-system-structure",
    "href": "organization.html#file-system-structure",
    "title": "Organizing things for Successfull Reproducibility",
    "section": "File System Structure",
    "text": "File System Structure\nHow do we tell our code where to find files?\nBy stating a file path. For example if my code is trying to read some_data.csv\n\nsome_data &lt;- read.csv(\"/home/vargas-poulsen/Documentes/Workshops/RLadies-SB/reproducible-workflows/some_data.csv\")\n\nIf I share my script with this file path to my colleagues, would they be able to open the file?\nProbably not, given that the file is unique to my machine with my user name and file system organization.\nA better (and reproducible) way:\nRProjects\n\nProvides a self contained working directory that does not depend on the absolute location of your computer.\nBundles all your work within a working directory, pointing to relative locations within the project.\nWithin this centralize location we can organize all the files involved in our project (inputs data, scripts, outputs, etc.)\n\nWhen you create an RProject, it creates and Rproj file and a folder in your computer that will be the working directory  when your are working in your Rproj.\n\n\n\n\n\n\n\nAbsolute paths vs relative paths\n\n\n\n\nAn absolute path always starts with the root of your file system and locates files from there. For example: /home/vargas-poulsen/Documentes/Workshops/RLadies-SB/reproducible-workflows/data/some_data.csv\nRelative paths start from some location in your file system that is below the root. Relative paths are combined with the path of that location to locate files on your system. R refer to the location where the relative path starts as our working directory. For example, if my project is named repoducible-workflows, then the relative path to some_data.csv will be data/some_data.csv.\n\n\n\n\nOrganizing files in you project\nAs we mentioned before, when you create an R Project, R creates a folder in your computer (note that you choose where this folde lives) with the same name as your R project, this folder is the working directory when you open the .Rpoj file. After creating a project, it is good practice to set up an organized structure of sub folders within you project.\nOrganization is personal and will vary depending on each project’s need. The main point is to ensure that the structure of the folders (directories) and location of files in your project are consistent, informative and works for you. Having a consistent and organized project structure gets you a long way when it comes to reproducibility.The location of files should be as informative as possible on what a file contains The idea is to organize your research into a compendium that has all of the digital parts needed to replicate your analysis, like code, figures, the manuscript, and data access.\nSome common sub-folders (directories) within a basic R project structure are:\n\n\n\ndata: where we store our data (often contains sub-directories for raw, processed, and metadata data)\nR or scripts: contains scripts for cleaning or wrangling, etc. (some find this name misleading if their work has other scripts beyond the R programming language, in which case they call this directory scripts)\nplots or figs: generated plots, graphs, and figures\ndocs: summaries or reports of analysis or other relevant project information\n\nDirectory organization will vary from project to project, but the ultimate goal is to create a well organized project for both reproducibility and collaboration.\n\n\n\n\n\n\nOne more thing about (reproducible) file paths\nWorking within an R project is the first step to making my file paths reproducible given that all my work is contained within this project. However, pointing to things within my project (by pointing the correct file path) can still bring some issues when reproducing my work in different machines. For example from R for Data Science (Grolemund & Wickham)\n\nMac and Linux uses slashes (e.g. plots/diamonds.pdf) and Windows uses backslashes (e.g. plots.pdf). R can work with either type (no matter what platform you’re currently using). But,  backslashes mean something special to R, so we need to be careful when using them.\n~ is a convenient shortcut to your home directory on mac. Windows doesn’t really have the notion of a home directory, so it instead points to your documents directory.\n\nHow to make your file paths withing your project robust?\nhere::here()\n\nThe here package help us set unbreakable paths by setting the default working directory to be the project’s directory and, you don’t need to use either \\\\ or / to indicate path to you file. Instead, each directory in your file path is written in quotation separated with a comma. For example if I’m wowing on a .qmd file that lives inside my doc folder and I want to read in data from data/raw it would look like this:\n\nraw_data &lt;- read_csv(here::here(\"data\", \"raw\", \"my_raw_data.csv\"))\n\nThe here::here() calls the function here() from the (::) package here.\nThis is particularly helpful when we have multiple folders in out project for different purposes.\n\n\n\n\n\n\nConcluding Remarks\n\n\n\nUsing R Projects + here() allows you to have self contained and portable analysis with all file paths relative to the project. If you share your project folder, your colleague, friend, collaborator should be able to run all the scripts with (hopefully) no issues. AKA.. We have a reproducible workflow.\n\n\n\n\nNaming Conventions\nThe documentation of your work starts with good files names and file system organization. This means naming materials, variables, objects, etc, associated with your analysis in a\n\nmeaningful,\nconcise,\ninformative,\nconsistent, and\ncode-friendly way.\n\nThe name and location of files should be as informative as possible on what a file contains, why it exists, and how it relates to other files in the project (British Ecology Society). These principles apply to all files in your project, not just scripts and objects in your script. Good naming practices allows for a more intuitive workflow and helps with good data management practices.\nClear naming structure allows us to understand the content and relationship among elements in your analysis. It also makes it easier to search for a specific input or output associated to a particular script or step in your research.\n\nMeaningful\n\nNames of variables, data frames, files (here on names) should not be too generic that the user or reader would need a definition or description to know what it contains.\nName should be specific and the easier to interpret the better.\nEnsure file names also include informative description of file contents.\n\n\n“As a general rule of thumb, it’s better to prefer long, descriptive names that are easy to understand rather than concise names that are fast to type.” (Grolemund & Wickham, R4DS)\n\n\n\n\n\n\n\nBad vs Good filenames\n\n\n\nBad - 01.R - fig1.png - file-1.csv\nBetter - 01_download_data.R - fig1_scatterplot_bodytemperatur_metabolicactivity.png - ca_mean_annual_temp_by_county.csv\n\n\n\n\nConcise\n\nIt’s a balance between meaningful and conciseness, but it is better to be descriptive than not know what it is.\nLonger names means more typing, longer coding but less effort in looking up what each variable is.\n\n\n\nConsistent\n\nKeep names for the same thing completely identical. R is space and case sensitive, this means that “CA Temp” is completely different than “ca_temp”.\nMake you life easier and be consistent on how you name things across data frames. For example, if you have a column date, other data frames SHOULD NOT be called Date_start.\nChose a naming convention and stick to it for better readability of your code. this_is_snake_case, (good for naming objects in your scripts), thisIsCamelCase, this-is-kebab.\n\n\n\nEasy to order by default\n\nThis is particular important for files names.\nStart the file name with the most generic aspect (but significant) and then go to the more specific.\n\n\n“Choose filenames so that alphabetical sorting will organise types of files for you: in the same way that ISO 8601 puts the most significant unit (year) first so that alphabetical = chronological.” – Hao Ye, UC San Diego\n\n\n\nCode/Machine Friendly\n\nAvoid spaces, punctuation, accented characters and case sensitivity.\nMore specifically, stick to “a-zA-Z0- 9_” characters. Use periods/full stops for file type only (i.e. .csv).\nUse delimiters to separate words. For example, snake_case_convention or kebab-case-convention. “_” and “-” are great delimiters, be consistent and don’t mix, this makes names easy to match and search programmatically and easy to analyse.\n\n\n\n\n\n\n\nConcluding Remarks\n\n\n\nIt is not the end of the world if you give something a bad name. And no work has to be perfect, but keeping this recommendations in mind could save you time in the long run and help search for specific files, objects with in a project easily.",
    "crumbs": [
      "Sections",
      "Organization"
    ]
  },
  {
    "objectID": "organization.html#version-control-git",
    "href": "organization.html#version-control-git",
    "title": "Organizing things for Successfull Reproducibility",
    "section": "Version Control: Git",
    "text": "Version Control: Git\n\n“Version control, also known as source control, is the practice of tracking and managing changes to software code. Version control systems are software tools that help software teams manage changes to source code over time.” (Atlassian)\n\n\nGitHub",
    "crumbs": [
      "Sections",
      "Organization"
    ]
  },
  {
    "objectID": "organization.html#workflow-part-1-rstudio-git-github",
    "href": "organization.html#workflow-part-1-rstudio-git-github",
    "title": "Organizing things for Successfull Reproducibility",
    "section": "Workflow (part 1): RStudio + Git + GitHub",
    "text": "Workflow (part 1): RStudio + Git + GitHub",
    "crumbs": [
      "Sections",
      "Organization"
    ]
  },
  {
    "objectID": "organization.html#what-about-my-bigish-data---workflow-part-2",
    "href": "organization.html#what-about-my-bigish-data---workflow-part-2",
    "title": "Organizing things for Successfull Reproducibility",
    "section": "What about my (bigish) data?? - Workflow (part 2)",
    "text": "What about my (bigish) data?? - Workflow (part 2)\n\nGoogle Drive (Box, SharePoint?) - RStudio - GitHub\nZenodo (other repositories) - RStudio - GitHub\nServer - RStudio - GitHub",
    "crumbs": [
      "Sections",
      "Organization"
    ]
  }
]